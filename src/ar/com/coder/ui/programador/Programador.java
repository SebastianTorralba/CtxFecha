/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.coder.ui.programador;

import ar.com.coder.Principal;
import ar.com.coder.dominio.PedidoSeguimientoControlador;
import ar.com.coder.objetos.PedidoSeguimiento;
import ar.com.coder.ui.programador.objetos.Dia;
import ar.com.coder.ui.programador.objetos.Tarea;
import ar.com.coder.util.Util;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;

/**
 *
 * @author Torralba
 */
public class Programador extends javax.swing.JPanel {

    private Date fechaInicio, fechaFin;
    private Set<Dia> dias = new TreeSet();
    private List<Tarea> tareas = new LinkedList();
    private long rangoDias;
    private Tarea tareaActiva;
    private ArrayList<PedidoSeguimiento> pedidos;
    Calendar calendario = Calendar.getInstance();
    private PedidoSeguimientoControlador pedidoSeguimientoControlador;
    int preX;
    int preY;
    int ancho;
    boolean soltado = false;

    public long getRangoDias() {
        return rangoDias;
    }

    public void setRangoDias(long rangoDias) {
        this.rangoDias = rangoDias;
    }

    Random r = new Random();
    int nroPartida = 0;

    public void agregarTarea(Tarea tarea) {
        tareas.add(tarea);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2.0f));

        for (Dia diaSemana : dias) {

            g2.setColor(diaSemana.getColorLimites());
            g2.draw(diaSemana);
            g2.setColor(Color.BLACK);
            g2.drawString(Util.convertirFechaDate(diaSemana.getFecha()), diaSemana.x, diaSemana.y);

            g2.setColor(diaSemana.getColorFondo());
            g2.fill(diaSemana);
            
        }
        for (Tarea t : tareas) {
                g2.setColor(t.getColorLimites());
                g2.draw(t);
                g2.setColor(t.getColorFondo());
                g2.fill(t);
                if (t.getAlto() > 10) {
                    g.setColor(Color.BLACK);
                    g2.drawString(t.getNombre(), t.x, t.y + 10);
                    g2.drawString(t.getPartida().getNroLote(), t.x, t.y + 20);
                }
            }
        /*    
         */
    }

    /**
     * Creates new form Programador
     */
    public Programador() {
        int i = 0;

        initComponents();
    }

    public Programador(ArrayList<PedidoSeguimiento> pedidos) {
        this.pedidos = pedidos;
        pedidoSeguimientoControlador = new PedidoSeguimientoControlador(Principal.connection);
        pedidoSeguimientoControlador.obtenerRangoFechas(pedidos);
        Map<Date, List> organizados = pedidoSeguimientoControlador.organizarpordia(pedidos);
        fechaInicio = pedidoSeguimientoControlador.getFechaInicio();
        fechaFin = pedidoSeguimientoControlador.getFechaFin();
        rangoDias = Util.diffFecha(fechaInicio, fechaFin);
        calendario.setTime(fechaInicio);
        ancho=(int) (rangoDias*Dia.ANCHO);
        for (int i = 0; i <= rangoDias; i++) {
            Dia dia = new Dia(new Point((Dia.ANCHO * i) + Dia.OFFSET, Dia.OFFSET));
            dia.setFecha(calendario.getTime());
            
            dias.add(dia);
            if (organizados.containsKey(calendario.getTime())) {
                List<PedidoSeguimiento> pedidosDia = organizados.get(calendario.getTime());
                Point puntoBase = dia.getLocation();
                int offsetAltura=0;
                for (PedidoSeguimiento ps : pedidosDia) {
                    
                    Tarea t = new Tarea(new Point(puntoBase.x, puntoBase.y + offsetAltura), ps);
                    offsetAltura+=t.getAlto();
                    dia.addTarea(t);
                    tareas.add(t);
                }

            }
            calendario.add(Calendar.DATE, 1);
        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        /*  if (!(tarea == null)) {
           
         }*/
        Iterator it = tareas.iterator();
        while (it.hasNext()) {
            tareaActiva = (Tarea) it.next();

            if (tareaActiva.contains(evt.getPoint())) {
                preX = tareaActiva.x - evt.getX();
                preY = tareaActiva.y - evt.getY();
                actualizarUbicacion(evt);
                soltado = false;
                break;
            }
        }

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (!soltado) {
            actualizarUbicacion(evt);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

        /*       if (tarea.contains(evt.getPoint())) {
            
        } else {
            soltado = false;
        }*/
        soltado = true;
        actualizarUbicacion(evt);
        tareaActiva = null;
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased
    public void actualizarUbicacion(java.awt.event.MouseEvent evt) {
        int x, y;
        if (!soltado) {
            x = preX + evt.getX();
            y = preY + evt.getY();
            x = (int) ((x < 20) ? 20 : (x > ancho) ? ancho : x);
            y = (y < 20) ? 20 : y;
            //  x= (x>620) ? 620 : x;

            tareaActiva.setLocation(x, y);
        } else {
            acoplarDia();
        }
        repaint();

    }

    boolean acoplarDia() {
        for (Dia dia : dias) {

            if (dia.contains(tareaActiva.x, tareaActiva.y)) {
                tareaActiva.setLocation(dia.x, tareaActiva.y);
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
